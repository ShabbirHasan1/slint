// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

import { CosmicPalette, CosmicFontSettings } from "styling.slint";

export component FocusBorder inherits Rectangle {
    border-width: 2px;
    border-color: CosmicPalette.focus-stroke-outer;

    Rectangle {
        x: parent.border-width;
        y: parent.border-width;
        width: parent.width - 2 * parent.border-width;
        height: parent.height - 2 * parent.border-width;
        border-width: 1px;
        border-radius: parent.border-radius - 2px;
        border-color: CosmicPalette.focus-stroke-inner;
    }
}

export component StateLayerBase {
    in property <length> border-radius <=> overlay.border-radius;
    in property <bool> has-focus;
    in property <bool> pressed;
    in property <bool> has-hover;
    in property <bool> checked;

    @children

    overlay := Rectangle {}

    if (root.has-focus) : Rectangle {
        width: root.width + 6px;
        height: root.height + 6px;
        border-width: 1px;
        border-radius: root.border-radius + 3px;
        border-color: CosmicPalette.state-focus;
    }

    states [
        pressed when root.pressed : {
            overlay.background: CosmicPalette.state-pressed;
        }
        hover when root.has-hover : {
            overlay.background: CosmicPalette.state-hover;
        }
        checked when root.checked : {
            overlay.background: CosmicPalette.state-selected;
        }
    ]
}

export component StateLayer inherits TouchArea {
    in property <length> border-radius <=> base.border-radius;
    out property <bool> has-focus: focus-scope.has-focus;
    in-out property <bool> checked;

    forward-focus: focus-scope;

    focus-scope := FocusScope {
        x: 0;
        width: 0; // Do not react on clicks
        enabled <=> root.enabled;

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                root.clicked();
                 return accept;
            }

            return reject;
        }
    }

   base := StateLayerBase {
        width: 100%;
        height: 100%;
        has-focus: root.has-focus;
        pressed: root.pressed;
        has-hover: root.has-hover;
        checked: root.checked;

        @children
   }
}

export component MenuBorder inherits Rectangle {
    border-radius: 7px;
    background: CosmicPalette.alternate-background;
    drop-shadow-blur: 16px;
    drop-shadow-offset-y: 8px;
    drop-shadow-color: CosmicPalette.shadow;

    Rectangle {
        border-width: 1px;
        border-radius: parent.border-radius;
        border-color: CosmicPalette.control-background-stroke-flyout;
    }
}

export component ListItem {
    in property <bool> is-selected;
    in property <StandardListViewItem> item;
    in property <bool> has-focus;
    in property <bool> has-hover;
    in property <bool> pressed;
    in property <int> index;
    in property <length> pressed-x;
    in property <length> pressed-y;

    min-width: i-layout.min-width;
    min-height: max(40px, i-layout.min-height);
    vertical-stretch: 0;
    horizontal-stretch: 1;

    states [
        pressed when root.pressed : {
            i-background.background: is-selected ? CosmicPalette.subtle-secondary : CosmicPalette.subtle-tertiary;
        }
        hover when root.has-hover : {
            i-text.color: CosmicPalette.text-secondary;
            i-background.background: is-selected ? CosmicPalette.subtle-tertiary : CosmicPalette.subtle-secondary;
            i-selector.height: root.is-selected ? 16px : 0;
        }
        is-selected when root.is-selected : {
            i-background.background: CosmicPalette.subtle-secondary;
            i-selector.height: 16px;
        }
    ]

    if (root.has-focus) : FocusBorder {
        border-radius: 4px;
    }

    i-background := Rectangle {
        width: root.width - 6px;
        height: root.height - 4px;
        background: transparent;
        border-radius: 4px;

        animate background { duration: 150ms; }

        i-layout := HorizontalLayout {
            padding-left: 16px;
            padding-right: 16px;
            spacing: 4px;

            i-text := Text {
                text: root.item.text;
                color: CosmicPalette.control-foreground;
                font-size: CosmicFontSettings.body.font-size;
                font-weight: CosmicFontSettings.body.font-weight;
                vertical-alignment: center;
                horizontal-alignment: left;
                overflow: elide;

                animate color { duration: 200ms; }
            }
        }

        i-selector := Rectangle {
            x: 0px;
            y: (parent.height - self.height) / 2;
            width: 3px;
            height: 0px;
            background: CosmicPalette.accent-background;
            border-radius: 2px;

            animate height { duration: 150ms; easing: ease-out; }
        }
    }

    @children
}
